import { Button, Input, Modal, message } from "antd";
import { useState } from "react";
import { Helmet } from "react-helmet";
import { BsBoxSeamFill } from "react-icons/bs";
import { FaUser } from "react-icons/fa";
import { MdKeyboardArrowRight } from "react-icons/md";
import { useQuery } from "react-query";
import { useNavigate } from "react-router-dom";
import AddAddressModal from "../Components/AddAddressModal/AddAddressModal";
import { Footer } from "../Components/Footer/Footer";
import { Header } from "../Components/Header/Header";
import { getUserId } from "../helpers/loggedUser";
import { getUserById, useUpdateUser } from "../utils/apis";

const ProfilePge = () => {
  const [selectedAccSett, setSelectedAccSett] = useState("profileInfo");
  const [editUserName, setEditUserName] = useState(false);
  const [editEmail, setEditEmail] = useState(false);
  const [editPhone, setEditPhone] = useState(false);
  const [addressModalOpen, setAddressModalOpen] = useState(false);
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [userAddress, setUserAddress] = useState<any>({});
  const [address, setAddress] = useState<any>();

  const userId = getUserId() || "";
  const isUserId = !!userId;
  const navigate = useNavigate();

  const { data , refetch} = useQuery("getuserbyid", () => getUserById(userId), {
    enabled: isUserId,
    onSuccess: (data) => {
      setUsername(data?.data?.username);
      setEmail(data?.data?.email);
      setPhone(data?.data?.phone);
      setUserAddress(
        data?.data?.ShippingAddress[data?.data?.ShippingAddress.length - 1]
      );
    },
  });

  const { mutate: userUpdate } = useUpdateUser();

  const handleEditUserName = () => {
    userUpdate(
      { id: userId, data: { username: username } },
      {
        onSuccess() {
          message.success("User name has changed");
          setEditUserName(false);
          refetch();
        },
        onError() {
          message.error("could not change user name");
        },
      }
    );
  };
  const handleEditEmail = () => {
    userUpdate(
      { id: userId, data: { email: email } },
      {
        onSuccess() {
          message.success("User email has changed");
          setEditEmail(false);
          refetch();
        },
        onError() {
          message.error("could not change user email");
        },
      }
    );
  };
  const handleEditPhone = () => {
    userUpdate(
      { id: userId, data: { phone: phone } },
      {
        onSuccess() {
          message.success("User phone has changed");
          setEditPhone(false);
          refetch();
        },
        onError() {
          message.error("could not change user phone");
        },
      }
    );
  };

  return (
    <div className="w-full h-full">
      <Helmet>
        <title>Fursancart profile of user</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/fursanFavIcon.svg" />
      </Helmet>
      <Header />
      <div className="mx-auto max-w-[1200px] h-[500px] flex gap-3 border">
        <div className="bg-white w-1/3 h-full hidden sm:flex flex-col gap-3 border ">
          <div className="p-5 flex gap-5 items-center ">
            <img
              src="/public/pofile.jpg"
              alt="profile"
              className="w-16 rounded-full"
            />
            <div>
              <p>Hello,</p>
              <h2 className="font-semibold">{data?.data?.username}</h2>
            </div>
          </div>
          <div className="">
            {/* my order */}
            <div
              className="flex justify-between items-center p-5 border hover:bg-amber-200"
              onClick={() => navigate("/user/orders")}
            >
              <h2 className="flex gap-2 items-center text-lg font-bold">
                <span>
                  <BsBoxSeamFill className="text-amber-400" />
                </span>{" "}
                MY ORDERS
              </h2>
              <span>
                <MdKeyboardArrowRight size={25} />
              </span>
            </div>
            {/* account settings */}
            <div>
              <div className="flex justify-between items-center p-5">
                <h2 className="flex gap-2 items-center text-lg font-bold">
                  <span>
                    <FaUser className="text-amber-400" />
                  </span>{" "}
                  ACCOUNT SETTINGS
                </h2>
              </div>
              <div
                className={`p-3 hover:bg-amber-200 ${
                  selectedAccSett === "profileInfo" ? "bg-amber-200" : ""
                }`}
                onClick={() => setSelectedAccSett("profileInfo")}
              >
                <h3 className="pl-10 font-medium">Profile Information</h3>
              </div>
              <div
                className={`p-3 hover:bg-amber-200 ${
                  selectedAccSett === "manageAddress" ? "bg-amber-200" : ""
                }`}
                onClick={() => setSelectedAccSett("manageAddress")}
              >
                <h3 className="pl-10 font-medium">Manage Address</h3>
              </div>
              <div
                className={`p-3 hover:bg-amber-200 ${
                  selectedAccSett === "activityLog" ? "bg-amber-200" : ""
                }`}
                // onClick={() => setSelectedAccSett("activityLog")}
              >
                <h3 className="pl-10 font-medium">Activity log</h3>
              </div>
            </div>
          </div>
        </div>
        <div className="bg-white w-full sm:w-2/3 h-full p-10">
          <div
            className={`${
              selectedAccSett === "profileInfo" ? "block" : "hidden"
            }`}
          >
            <div className="mb-5">
              <div className="flex gap-5 items-center justify-start sm:hidden mb-10">
                <img
                  src="/public/pofile.jpg"
                  alt="profile"
                  className="w-16 rounded-full"
                />
                <div>
                  <p>Hello,</p>
                  <h2 className="font-semibold">{data?.data?.username}</h2>
                </div>
              </div>
              <div className="flex items-center gap-5 mb-3">
                <h3 className="font-semibold">Personal Information</h3>
                <span
                  className="text-xs cursor-pointer hover:text-blue-500"
                  onClick={() => setEditUserName((prev) => !prev)}
                >
                  Edit
                </span>
              </div>
              <div className="flex gap-3 items-center">
                <Input
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  placeholder="Enter user name"
                  disabled={!editUserName}
                  className="p-3 text-lg max-w-[300px]"
                />
                <Button
                  className={`bg-amber-400 text-white ${
                    !editUserName ? "hidden" : "block"
                  }`}
                  onClick={handleEditUserName}
                >
                  Save
                </Button>
              </div>
            </div>
            <div className="mb-5">
              <div className="flex items-center gap-5 mb-3">
                <h3 className="font-semibold">Email Address</h3>
                <span
                  className="text-xs cursor-pointer hover:text-blue-500"
                  onClick={() => setEditEmail((prev) => !prev)}
                >
                  Edit
                </span>
              </div>
              <div className="flex gap-3 items-center">
                <Input
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="Enter email address"
                  disabled={!editEmail}
                  className="p-3 text-lg max-w-[300px]"
                />
                <Button
                  className={`bg-amber-400 text-white ${
                    !editEmail ? "hidden" : "block"
                  }`}
                  onClick={handleEditEmail}
                >
                  Save
                </Button>
              </div>
            </div>
            <div className="mb-5">
              <div className="flex items-center gap-5 mb-3">
                <h3 className="font-semibold">Mobile Number</h3>
                <span
                  className="text-xs cursor-pointer hover:text-blue-500"
                  onClick={() => setEditPhone((prev) => !prev)}
                >
                  Edit
                </span>
              </div>
              <div className="flex gap-3 items-center">
                <Input
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  placeholder="Enter phone number"
                  disabled={!editPhone}
                  className="p-3 text-lg max-w-[300px]"
                />
                <Button
                  className={`bg-amber-400 text-white ${
                    !editPhone ? "hidden" : "block"
                  }`}
                  onClick={handleEditPhone}
                >
                  Save
                </Button>
              </div>
            </div>
          </div>
          {/* address area */}
          <div
            className={`${
              selectedAccSett === "manageAddress" ? "block" : "hidden"
            }`}
          >
            <div className="mb-5">
              <div className="flex items-center gap-5 mb-3">
                <h3 className="font-semibold">Manage Address</h3>
                <span
                  className="text-xs cursor-pointer hover:text-blue-500"
                  onClick={() => setAddressModalOpen(true)}
                >
                  Edit
                </span>
              </div>
              <div>
                <div>
                  <p>
                    Full name : <span>{userAddress?.fullName}</span>
                  </p>
                  <p>
                    Phone no : <span>{userAddress?.phone}</span>
                  </p>
                  <p>
                    State : <span>{userAddress?.state}</span>
                  </p>
                  <p>
                    city : <span>{userAddress?.city}</span>
                  </p>
                  <p>
                    Pincode : <span>{userAddress?.pincode}</span>
                  </p>
                  <p>
                    House/Build no :{" "}
                    <span>{userAddress?.houseNoOrBuildingName}</span>
                  </p>
                  <p>
                    Building Type : <span>{userAddress?.type}</span>
                  </p>
                  <p>
                    Landmark : <span>{userAddress?.landmark}</span>
                  </p>
                  <p>
                    Address : <span>{userAddress?.address}</span>
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Footer />
      <Modal
        title="Address"
        open={addressModalOpen}
        footer={false}
        onCancel={() => setAddressModalOpen(false)}
      >
        <AddAddressModal
          setOpen={setAddressModalOpen}
          setAddress={setAddress}
          address={address}
        />
      </Modal>
    </div>
  );
};

export default ProfilePge;
