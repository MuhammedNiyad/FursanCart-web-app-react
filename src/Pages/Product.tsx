import { LoadingOutlined } from "@ant-design/icons";
import { Divider, Rate, message } from "antd";
import { useEffect, useMemo, useState } from "react";
import { Helmet } from "react-helmet";
import { AiOutlineDislike, AiOutlineLike } from "react-icons/ai";
import { BiCartDownload } from "react-icons/bi";
import { FaHeart, FaPlus, FaRegHeart } from "react-icons/fa";
import { FiMinus } from "react-icons/fi";
import { PiLightningLight } from "react-icons/pi";
import { useQuery } from "react-query";
import { Link, useNavigate, useParams } from "react-router-dom";
import { Footer } from "../Components/Footer/Footer";
import { Header } from "../Components/Header/Header";
import { CartIcon } from "../Components/icons/CartIcon";
import { getUser, getUserId } from "../helpers/loggedUser";
import { ProductType } from "../lib/types";
import {
  getOneProduct,
  getProductReview,
  getUserWishList,
  useAddToCart,
  useAddToWishList,
} from "../utils/apis";

const Product = () => {
  const { id } = useParams();
  const [selectedImg, setSelectedImg] = useState("");
  // const dispatch = useAppDispatch();
  const [quantity, setQuantity] = useState<number>(1);
  // const navigate = useNavigate();
  const [product, setProduct] = useState<ProductType>();
  const [relatedProd, setRelatedProd] = useState([]);
  const [reviews, setReviews] = useState([]);

  const navigate = useNavigate();
  const userData = getUser();
  const isUser = !!userData;
  const [isWishListed, setIsWishListed] = useState(false);

  const { data: prodData, refetch } = useQuery("getOneProduct", () => getOneProduct(id));
  const { data: wishList } = useQuery(
    "getUserWishList",
    () => getUserWishList(getUserId()),
    { enabled: isUser }
  );

  const { isLoading } = useQuery(
    "getproductreview",
    () => getProductReview(id),
    {
      onSuccess(data) {
        setReviews(data?.data?.reverse());
      },
    }
  );

  const { mutate: Addtocart } = useAddToCart();
  // console.log("single Prod: ",product);

  useEffect(() => {
    setProduct(prodData?.data.product);
    setRelatedProd(prodData?.data.relatedProducts);
  }, [prodData]);

  useMemo(() => {
    if (wishList?.data && product?.variants[0]?.id) {
      const productVariantId = product?.variants[0]?.id;

      console.log(productVariantId);

      const alreadyWished = wishList?.data?.items.some(
        (item: any) => item.variantId === productVariantId
      );
      console.log(alreadyWished);

      if (alreadyWished) {
        setIsWishListed(true);
      }
      // console.log(alreadyWished);
    }
  }, [wishList?.data]);

  const addToCart = (data: any) => {
    if (!userData) {
      navigate("/authorize");
    }

    const compainData = {
      varientId: data,
      quantity: quantity,
      userId: getUserId(),
    };

    Addtocart(compainData, {
      onSuccess() {
        message.success("Item added to cart");
      },
      onError() {
        message.error("could not add item to cart");
      },
    });
  };

  const { mutate: addToWishList } = useAddToWishList();

  const handleAddToWishList = (id: string | undefined) => {
    if (!userData) {
      navigate("/authorize");
    } else {
      addToWishList(
        { data: { varientId: id, userId: getUserId() } },
        {
          onSuccess() {
            setIsWishListed(true);
            message.success("Item added to wishlist");
          },
          onError() {
            message.error("could not add to wishlist");
          },
        }
      );
    }
  };

    const changeDateFormat = (curDate: any) => {
      const date = new Date(curDate);

      const day = String(date.getDate()).padStart(2, "0");
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const year = String(date.getFullYear()).padStart(2, "0");

      const formattedDate = `${day}/${month}/${year}`;

      return formattedDate;
    };

  return (
    <div>
      <Helmet>
        <title>{product?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="../../public/fursanFavIcon.svg" />
      </Helmet>
      <Header />
      <div className="mt-10 px-5 w-full flex flex-col sm:flex-row gap-5 ">
        {/* image */}
        <div className="flex flex-col items-center gap-5 w-full h-full sm:w-1/2">
          <div className="w-full lg:w-[80%] h-[80%] flex justify-center items-center relative">
            <img
              src={selectedImg ? selectedImg : product?.images[0].url}
              alt="product-img"
              className="max-w-[300px]"
            />
            <span className="p-3 bg-white shadow-md rounded-full absolute right-0 top-0 scale-95 hover:scale-105 duration-200">
              {!isWishListed ? (
                <FaRegHeart
                  size={20}
                  className="text-amber-500"
                  onClick={() => handleAddToWishList(product?.variants[0]?.id)}
                />
              ) : (
                <FaHeart size={20} className="text-amber-500" />
              )}
            </span>
          </div>
          <div
            className={`${
              product?.images ? "block" : "hidden"
            } h-[20%] flex gap-5 w-full overflow-x-scroll justify-center items-center`}
          >
            {product?.images.map((it, ind: number) => (
              <img
                key={ind}
                src={it.url}
                alt="product image"
                className="md:max-w-[50px] max-w-[50px]"
                onClick={() => setSelectedImg(it.url)}
              />
            ))}
          </div>
        </div>
        {/* details */}
        <div className="flex md:items-center sm:w-1/2 ">
          <div className="space-y-5 w-full">
            <h1 className="text-2xl lg:text-4xl font-bold">{product?.name}</h1>
            {/* <div className="">{product?.description}</div> */}
            <div dangerouslySetInnerHTML={{ __html: product?.description|| <>No  description</> }} />

            {/* rating */}
            <div className="flex gap-1 items-center">
              <Rate
                style={{
                  fontSize: "0.8rem",
                }}
                allowHalf
                disabled
                value={product?.rating ?? product?.rating}
              />
              <span>{`(${product?.rating})`}</span>
            </div>
            <Divider />
            {/* price */}
            <div className="px-5">
              <h3 className="text-xl md:text-2xl lg:text-4xl font-medium flex gap-2 items-center md:items-start">
                SAR {product?.price}
                <span className="bg-gray-100 p-1 text-xs">
                  {product?.discount_percent}% off
                </span>
              </h3>
            </div>
            <Divider />
            {/* quantity */}
            <div className="flex items-center gap-3">
              <div className="flex gap-2 items-center bg-gray-100 space-x-3 px-3 py-1 rounded-2xl">
                <button
                  title="decrease"
                  onClick={() => setQuantity((prev) => (prev -= 1))}
                  disabled={quantity <= 1}
                >
                  <FiMinus size={12} className="text-amber-500" />
                </button>
                <p>{quantity}</p>
                <button
                  title="increase"
                  onClick={() => setQuantity((prev) => (prev += 1))}
                  // disabled={quantity >= product?.stockQuantity}
                >
                  <FaPlus size={12} className="text-amber-500" />
                </button>
              </div>
              <div>
                only{" "}
                <span className="text-orange-500">
                  {product?.stockQuantity} {product?.unit}
                </span>{" "}
                left in this item!
              </div>
            </div>
            {/* buy now and add cart button */}
            <div className="flex w-full gap-2 items-center justify-between">
              <button
                type="button"
                className="w-[50%] h-[35px] md:h-12 flex bg-gray-100 items-center justify-center rounded-2xl md:rounded-3xl gap-1 scale-95 hover:scale-100 duration-200"
                onClick={() => addToCart(product?.variants[0].id)}
              >
                <BiCartDownload
                  size={25}
                  className="p-1 rounded-full bg-amber-400 text-white"
                />{" "}
                add to cart
              </button>
              <button
                type="button"
                className="w-[50%] h-[35px] md:h-12 flex items-center bg-amber-400 justify-center text-white rounded-2xl md:rounded-3xl gap-1 scale-95 hover:scale-100 duration-200 "
                onClick={() => navigate(`/cart/?prod=${id}&qnt=${quantity}`)}
              >
                <PiLightningLight
                  size={25}
                  className="p-1 rounded-full bg-amber-400 text-white"
                />{" "}
                buy now
              </button>
            </div>
            <div className="sm:h-44"></div>
          </div>
        </div>
      </div>

      {/* product offers and delivery details  */}
      <div></div>

      {/* product info */}
      <div className="w-full">
        <div className="mx-auto max-w-[1250px] h-full bg-white flex flex-col-reverse sm:flex-row">
          {/* show rating and review */}
          <div className="w-full h-full p-5">
            <h3 className="text-lg font-semibold">Reviews & Ratings</h3>
            {!isLoading ? (
              reviews && reviews.length > 0 ? (
                <div
                  className={`py-2 ${
                    reviews.length > 3 ? "h-[500px]" : "h-auto"
                  } sm:h-[500px] overflow-x-scroll`}
                >
                  {reviews.map((items: any, ind) => (
                    <div key={ind} className="border-b py-2">
                      <div className="flex gap-2">
                        <img
                          src="/public/pofile.jpg"
                          alt="user"
                          className="w-7 rounded-full"
                        />
                        <h4>{items?.UserReview?.user?.username}</h4>
                      </div>
                      <div className="flex gap-2 items-center my-2">
                        <Rate value={items.rating} className="text-xs" />
                        <span className="text-sm font-semibold">
                          {items.rating === 1
                            ? "Very Bad"
                            : items.rating === 2
                            ? "Bad"
                            : items.rating === 3
                            ? "Good"
                            : items.rating === 4
                            ? "Very Good"
                            : items.rating === 5
                            ? "Excellent"
                            : ""}
                        </span>
                      </div>
                      <div>
                        <p>{items.reviewText}</p>
                      </div>
                      <div className="flex justify-between items-center">
                        <p className="text-xs pt-2">
                          posted on ({changeDateFormat(items.createdAt)})
                        </p>
                        <div className="flex gap-1">
                          <span className="p-2 bg-slate-100 rounded-full scale-95 hover:scale-100">
                            <AiOutlineLike />
                          </span>
                          <span className="p-2 bg-slate-100 rounded-full scale-95 hover:scale-100">
                            <AiOutlineDislike />
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="h-[500px] flex items-center justify-center">
                  <span>No reviews</span>
                </div>
              )
            ) : (
              <div className="h-[500px] flex items-center justify-center">
                <span>
                  <LoadingOutlined className="text-3xl" />
                </span>
              </div>
            )}
          </div>
          <hr className="bg-black sm:h-[500px] border-l-2 " />
          {/* show product specifications and highlights */}
          <div className="w-full h-full">
            <div className="w-full h-full p-5">
              <h3 className="text-lg font-semibold">
                Highlights & Specifications
              </h3>
              <div className="sm:h-[500px] overflow-x-scroll">
                <div className="py-2">
                  <h5 className="font-medium text-neutral-400 ">Color</h5>
                  <p className="font-normal text-sm">
                    {product?.variants[0]?.value}
                  </p>
                </div>
                <div className="py-2">
                  <h5 className="font-medium text-neutral-400 ">Weight</h5>
                  <p className="font-normal text-sm">{product?.weight}</p>
                </div>
                <div className="py-2">
                  <h5 className="font-medium text-neutral-400 ">Highlights</h5>
                  <ul className="font-normal text-sm">
                    <li>
                      Lorem ipsum dolor sit, amet consectetur adipisicing elit.
                      Consequuntur architecto esse voluptates blanditiis
                    </li>
                    <li>
                      Lorem ipsum dolor sit amet consectetur adipisicing elit.
                      Cum, deserunt? Assumenda tempora ducimus dolor libero.
                    </li>
                  </ul>
                </div>
                <div className="py-2">
                  <h5 className="font-medium text-neutral-400 ">
                    Specifications
                  </h5>
                  <ul className="font-normal text-sm">
                    <li>
                      Lorem ipsum dolor sit, amet consectetur adipisicing elit.
                      Consequuntur architecto esse voluptates blanditiis
                    </li>
                    <li>
                      Lorem ipsum dolor sit amet consectetur adipisicing elit.
                      Cum, deserunt? Assumenda tempora ducimus dolor libero.
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <hr className="max-w-[1200px] mx-auto my-10" />

      {/* product rating and review */}
      <div></div>

      {/* related product */}
      <div className="p-5">
        <div className="mx-auto max-w-[1300px]">
          <h1 className="text-2xl font-semibold py-3">Related Products</h1>
          <main className="grid grid-cols-2 gap-1 p-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 ">
            {relatedProd?.map((it: any, i: number) => (
              <div
                key={i}
                className="cursor-pointer bg-white odd:mr-1 border hover:scale-100 hover:shadow-md ease-in-out duration-300 p-3 flex flex-col items-center gap-1 justify-center max-w-[310px]"
              >
                <Link
                  to={`/items/${it.id}/?prod=${it.name}`}
                  onClick={() => refetch()}
                >
                  <img
                    src={it.images[0]?.url}
                    width={140}
                    height={100}
                    alt={"img"}
                  />
                  <p className="text-sm text-blue-800 font-bold ">
                    {it.name.substring(0, 20).concat("...")}
                  </p>
                  {/* <p>{it.id}</p> */}
                </Link>

                <div className="">
                  <Rate
                    style={{
                      fontSize: "0.8rem",
                    }}
                    allowHalf
                    disabled
                    defaultValue={it.rating}
                  />
                  <div className=" font-bold text-lg flex justify-around items-center gap-1  w-full">
                    <b>SAR {it.price}</b>
                    <span onClick={() => addToCart(it.variants[0]?.id)}>
                      <CartIcon />
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </main>
        </div>
      </div>

      {/* footer */}
      <Footer />
    </div>
  );
};

export default Product;
