/* eslint-disable @typescript-eslint/no-explicit-any */
import { Button, Checkbox, Form, Input } from "antd";
import { Header } from "../Components/Header/Header";
import { Helmet } from "react-helmet";
import { Link, useNavigate } from "react-router-dom";
import { CheckIcon } from "../Components/icons/CheckIcon";
import { Footer } from "../Components/Footer/Footer";
import { loginApi, registerApi } from "../utils/apis";
import { useState } from "react";
import LoadingComp from "../Components/Common-Comp/LoadingComp";

const AuthPage = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const onFinish = async (values: any) => {
    setIsLoading(true);
    const res = await loginApi(values);
    if (res) {
      setIsLoading(false);
      navigate("/");
    } else {
      setIsLoading(false);
    }
  };

  const onFinishSignup = async (values: any) => {
    //   console.log(values);
    setIsLoading(true);
    const data = {
      username: values.username,
      email: values.email,
      password: values.pass,
    };

    const res = await registerApi(data);
    if (res) {
      setIsLoading(false);
      navigate("/");
    } else {
      setIsLoading(false);
    }
  };

  const onFinishFailed = (errorInfo: any) => {
    console.log("Failed:", errorInfo);
  };
  const onFinishFailedSignup = (errorInfo: any) => {
    console.log("Failed:", errorInfo);
  };
  return (
    <>
      <Helmet>
        <title>Login or Sign Up</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/fursanFavIcon.svg" />
      </Helmet>
      <Header />
      <main className="grid  w-full py-6 px-4 mt-16 lg:max-w-[80%] xl:max-w-[50%] mx-auto">
        <h1 className="text-4xl font-extrabold text-center mb-5">My Account</h1>

        <h2>{""}</h2>

        <section className="p-5 grid gap-1  sm:grid-cols-2 sm:gap-24 relative  ">
          {/* login form */}
          <Form
            name="basic"
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="off"
            className="w-full  mb-10"
            layout="vertical"
          >
            <h3 className=" mb-6 relative text-lg font-extrabold border-b after:absolute after:content-[''] after:w-[6rem] after:h-[0.15rem] after:bg-amber-400 after:-bottom-0 after:left-0 py-1">
              Login
            </h3>
            <p className="text-gray-500 mb-4">
              Welcome back! Sign in to your account.
            </p>
            <Form.Item
              label="Email"
              name="email"
              className=""
              rules={[
                {
                  required: true,
                  message: "Please input your email!",
                  type: "email",
                },
              ]}
            >
              <Input className="rounded-full py-2" />
            </Form.Item>

            <Form.Item
              label="Password"
              name="password"
              rules={[
                { required: true, message: "Please input your password!" },
              ]}
            >
              <Input.Password className="rounded-full py-2" />
            </Form.Item>

            <Form.Item name="remember" valuePropName="checked">
              <Checkbox>Remember me</Checkbox>
            </Form.Item>

            <Form.Item>
              <Button
                className="rounded-full bg-amber-300 font-extrabold w-[7rem]  h-[3rem] hover:bg-slate-800 hover:text-white"
                htmlType="submit"
              >
                Login
              </Button>
            </Form.Item>

            <Link to="reset-password" className="text-blue-600">
              Lost your password?
            </Link>
          </Form>
          <div
            className="hidden sm:block"
            style={{
              position: "absolute",
              height: "100%",
              right: "50%",
              top: "50%",
              transform: "translate(0 , -50%)",
            }}
          >
            <div className="bg-slate-200 h-[100%] w-[0.05rem] place-self-center relative   grid place-items-center">
              <div className="w-14 h-14 border rounded-full grid place-items-center absolute bg-white">
                <i>or</i>
              </div>
            </div>
          </div>
          {/* register form */}
          <Form
            name="basic"
            onFinish={onFinishSignup}
            onFinishFailed={onFinishFailedSignup}
            autoComplete="off"
            className="w-full "
            layout="vertical"
          >
            <h3 className="mb-6 relative text-lg font-extrabold border-b after:absolute after:content-[''] after:w-[6rem] after:h-[0.15rem] after:bg-amber-400 after:-bottom-0 after:left-0 py-1">
              Register
            </h3>
            <p className="text-gray-500 mb-4">
              Create new account today to reap the benefits of a personalized
              shopping experience.
            </p>
            <Form.Item
              label="Username"
              name="username"
              className=""
              rules={[
                {
                  required: true,
                  message: "Please input your username!",
                  type: "string",
                },
              ]}
            >
              <Input className="rounded-full py-2" />
            </Form.Item>

            <Form.Item
              label="Email"
              name="email"
              className=""
              rules={[
                {
                  required: true,
                  message: "Please input your email!",
                  type: "email",
                },
              ]}
            >
              <Input className="rounded-full py-2" />
            </Form.Item>

            <Form.Item
              label="Password"
              name="pass"
              rules={[
                { required: true, message: "Please input your password!" },
              ]}
            >
              <Input.Password className="rounded-full py-2" />
            </Form.Item>

            <Form.Item
              label="Confirm Password"
              name="con-password"
              rules={[
                { required: true, message: "Please input the same password" },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    if (!value || getFieldValue("pass") === value) {
                      return Promise.resolve();
                    }
                    return Promise.reject(
                      new Error("Confirm password does not match!")
                    );
                  },
                }),
              ]}
            >
              <Input.Password className="rounded-full py-2" />
            </Form.Item>
            <p className="my-5">
              Your personal data will be used to support your experience
              throughout this website, to manage your account, and for other
              purposes described in our{" "}
              <Link to="terms-and-conditions" className="text-blue-600">
                {" "}
                privacy policy
              </Link>{" "}
              .
            </p>
            <Form.Item>
              <Button
                className="rounded-full bg-amber-300 font-extrabold w-[7rem]  h-[3rem] hover:bg-slate-800 hover:text-white"
                htmlType="submit"
              >
                Register
              </Button>
            </Form.Item>

            <h3 className="font-bold">
              Sign ip today and you will be able to :
            </h3>
            <br />
            <ul className="leading-8">
              <li className="flex gap-2 ">
                <CheckIcon />
                Speed your way through checkout
              </li>
              <li className="flex gap-2">
                <CheckIcon />
                Track your orders easily
              </li>
              <li className="flex gap-2">
                <CheckIcon />a record of all your purchases
              </li>
            </ul>
          </Form>
        </section>
      </main>
      {isLoading && (
        <div className="">
          <LoadingComp />
        </div>
      )}
      <Footer />
    </>
  );
};

export default AuthPage;
