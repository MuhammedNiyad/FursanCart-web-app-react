import { Button, Form, Modal, Rate, message } from "antd";
import TextArea from "antd/es/input/TextArea";
import { useEffect, useState } from "react";
import { Helmet } from "react-helmet";
import { useQuery } from "react-query";
import LoadingComp from "../Components/Common-Comp/LoadingComp";
import { Footer } from "../Components/Footer/Footer";
import { Header } from "../Components/Header/Header";
import { getUserId } from "../helpers/loggedUser";
import {
  getAllOrders,
  getProducts,
  useCancelOrder,
  useCreateReview,
} from "../utils/apis";
import { IoIosStar } from "react-icons/io";
import { useForm } from "antd/es/form/Form";

const Order = () => {
  const {
    data: orders,
    isLoading,
    refetch: orderRefetch,
  } = useQuery("getallorders", getAllOrders);
  const { data: prodts, refetch: prodtRefetch } = useQuery(
    "getproductsforshoworder",
    getProducts
  );
  const { mutate: cancelorder } = useCancelOrder();
  const [reasonOpen, setReasonOpen] = useState(false);
  const [cancelProdId, setCancelProdId] = useState("");
  const [reasonField, setReasonField] = useState();
  const [reviewModalOpen, setReviewModalOpen] = useState(false);
  const [selectedIdForReview, setSelectedIdForReview] = useState("");

  const [form] = useForm();

  const userId = getUserId();
  // const [cancelConfOpen, setCancelConfOpen] = useState(false)
  const [filteredDatas, setFilteredDatas] = useState<any[]>([]);

  useEffect(() => {
    if (prodts?.data && orders?.data) {
      filterProductFromOrder(prodts?.data, orders?.data);
    }
  }, [orders?.data, prodts?.data]);

  const filterProductFromOrder = (products: any, orders: any) => {
    const filterd: any = [];
    orders?.forEach((order: any) => {
      if (order?.custId == userId) {
        order?.products?.forEach((orderProd: any) => {
          products?.forEach((product: any) => {
            product?.variants?.forEach((varient: any) => {
              if (varient?.id === orderProd?.varId) {
                filterd?.push({
                  id: order?.id,
                  prodName: product?.name,
                  orderedProdId: orderProd?.id,
                  productId: varient?.productId,
                  prodPrice: orderProd?.totPrice,
                  images: product?.images[0]?.url,
                  orderStatus:
                    orderProd?.orderStatuss[orderProd?.orderStatuss.length - 1],
                  orderedDate: order?.createdAt,
                });
              }
            });
          });
        });
      }
    });
    setFilteredDatas(filterd);
  };

  const handleOrderCancel = (id: any) => {
    setCancelProdId(id);
    setReasonOpen(true);
  };

  const cancelOrder = () => {
    console.log(cancelProdId);
    console.log(reasonField);

    // return
    cancelorder(
      { id: cancelProdId, userId: getUserId(), reason: reasonField },
      {
        onSuccess() {
          message.success("order cancelled");
          setReasonOpen(false);
          prodtRefetch();
          orderRefetch();
        },
        onError() {
          message.error("could not cancel order");
        },
      }
    );
  };

  const deliveryDataCalc = (delvDate: any) => {
    const date = new Date(delvDate);
    date.setDate(date.getDate() + 7);
    return date.toDateString();
  };

  const changeDateFormat = (curDate: any) => {
    const date = new Date(curDate);

    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = String(date.getFullYear()).padStart(2, "0");

    const formattedDate = `${day},${month},${year}`;

    return formattedDate;
  };

  const { mutate: createReviewAndRate } = useCreateReview();

  const handleReviewSubmit = (value: any) => {
    // console.log(value);
    setReviewModalOpen(false)

    const data = {
      rating: value.rating,
      reviewText: value.reviewText,
      prodId: selectedIdForReview,
      userId: userId,
    };

    createReviewAndRate(data, {
      onSuccess() {
        message.success("Thank you for your valuable review")
      },
      onError() {
        message.error("Failed to create review")
      }
    })
  };

  return (
    <div>
      <Helmet>
        <title>My Orders</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/fursanFavIcon.svg" />
      </Helmet>
      <Header />
      <div className="">
        <h1 className="text-2xl text-center my-5">Orders</h1>
      </div>
      <div className="my-10">
        {!isLoading ? (
          <div className=" max-w-[1000px] mx-auto px-5">
            {filteredDatas?.length > 0 ? (
              <div>
                {filteredDatas?.map((item, ind) => (
                  <div
                    key={ind}
                    className="flex flex-col gap-2 sm:gap-0 sm:flex-row justify-between my-3 p-5 bg-slate-100"
                  >
                    <div className="flex gap-5 max-w-[300px]">
                      <img src={item.images} alt="img" className="w-20 h-20" />
                      <h2 className="font-semibold  ">{item.prodName}</h2>
                    </div>
                    <div>
                      <h4>SAR {item.prodPrice}</h4>
                      <p
                        className={`text-xs pt-3 ${
                          item.orderStatus.status === "Cancelled" ||
                          item.orderStatus.status === "Delivered"
                            ? "hidden"
                            : "block"
                        }`}
                      >
                        Delivery expected in{" "}
                        <span className="text-sm">
                          {deliveryDataCalc(item.orderedDate)}
                        </span>
                      </p>
                    </div>
                    {/* {item.orderStatus.status !== "Cancelled" ? (
                      <p className="text-xs">
                        Delivery expected in{" "}
                        <span className="text-sm">
                          {deliveryDataCalc(item.orderedDate)}
                        </span>
                      </p>
                    ) : (
                      <p className="text-xs">
                        Ordered item{" "}
                        <span className="text-sm text-red-500">Canaelled</span>
                      </p>
                    )} */}
                    <div>
                      <div className="flex items-center gap-2">
                        <span
                          className={`${
                            item.orderStatus.status === "Cancelled"
                              ? "bg-red-500"
                              : "bg-green-500"
                          } w-3 h-3 rounded-full`}
                        >
                          {" "}
                        </span>
                        <h4 className="font-semibold">
                          {item.orderStatus.status}
                        </h4>
                        <p className="text-sm">
                          {changeDateFormat(item.orderStatus.createdAt)}
                        </p>
                      </div>
                      <p className="text-sm">{item.orderStatus.statusNote}</p>
                      <div
                        className={`flex justify-start pt-2 items-end ${
                          item.orderStatus.status === "Cancelled" ||
                          item.orderStatus.status === "Delivered"
                            ? "hidden"
                            : "block"
                        }`}
                      >
                        <Button
                          className="bg-red-500 text-white"
                          onClick={() => handleOrderCancel(item.orderedProdId)}
                        >
                          Cancel
                        </Button>
                      </div>
                      <div
                        className={`flex justify-start pt-2 items-end ${
                          item.orderStatus.status === "Delivered"
                            ? "hidden"
                            : "hidden"
                        }`}
                      >
                        <Button
                          className="bg-yellow-500 text-white"
                          // onClick={() => handleOrderCancel(item.prodId)}
                        >
                          Return
                        </Button>
                      </div>
                      <p
                        onClick={() => {
                          setReviewModalOpen(true);
                          setSelectedIdForReview(item.productId);
                        }}
                        className={`flex justify-start pt-2 items-center font-semibold text-blue-500 hover:underline cursor-pointer ${
                          item.orderStatus.status === "Delivered"
                            ? "block"
                            : "hidden"
                        }`}
                      >
                        <span>
                          <IoIosStar />
                        </span>{" "}
                        Rate & Review
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex items-center justify-center">
                <h1>did not order anything yet</h1>
              </div>
            )}
          </div>
        ) : (
          <div>
            <LoadingComp />
          </div>
        )}
      </div>
      <Footer />
      {/* order cancel conform modal */}
      <Modal
        open={reasonOpen}
        onCancel={() => setReasonOpen(false)}
        onOk={cancelOrder}
        title={"Conform order cancel"}
        okText="Confirm"
      >
        <div className="flex gap-4 p-5">
          <label className="text-nowrap font-semibold">Reason for</label>
          <TextArea
            rows={4}
            onChange={(e: any) => {
              setReasonField(e.target.value);
            }}
          />
        </div>
      </Modal>

      {/* product rating modal */}
      <Modal
        open={reviewModalOpen}
        onCancel={() => setReviewModalOpen(false)}
        onOk={() => handleReviewSubmit(form.getFieldsValue())}
        title={"Give review & rating"}
        okText="submit"
      >
        <div className="p-3">
          <Form form={form}>
            <Form.Item label="Rate" name={"rating"}>
              <Rate allowHalf />
            </Form.Item>
            <Form.Item label="Review" name={"reviewText"}>
              <TextArea rows={4} />
            </Form.Item>
          </Form>
        </div>
      </Modal>
    </div>
  );
};

export default Order;
